#!/bin/bash
# ============================================================================
# SEO Intelligence Platform - Development Orchestration Engine
# AI-Powered Development Automation System
# ============================================================================

set -euo pipefail

# Configuration
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
STATE_DIR="$PROJECT_ROOT/.dev-state"
LOG_DIR="$PROJECT_ROOT/.dev-logs"
DASHBOARD_PORT=3333
API_PORT=3334

# Colors for sophisticated output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Create necessary directories
mkdir -p "$STATE_DIR" "$LOG_DIR" "$PROJECT_ROOT/dashboard" "$PROJECT_ROOT/metrics"

# ============================================================================
# State Management Functions
# ============================================================================

init_state() {
    local state_file="$STATE_DIR/development.json"
    if [[ ! -f "$state_file" ]]; then
        cat > "$state_file" << 'EOF'
{
  "session": {
    "id": "",
    "startTime": "",
    "lastCheckpoint": "",
    "totalSessions": 0,
    "cumulativeTime": 0
  },
  "progress": {
    "phase": "initialization",
    "currentModule": "foundation",
    "completedModules": [],
    "totalProgress": 0,
    "moduleProgress": {}
  },
  "metrics": {
    "linesGenerated": 0,
    "testsCreated": 0,
    "bugsFixed": 0,
    "apiEndpoints": 0,
    "databaseTables": 0,
    "componentsBuilt": 0
  },
  "ai": {
    "localModelsActive": [],
    "tokenUsage": 0,
    "successfulGenerations": 0,
    "failedGenerations": 0,
    "optimizationRuns": 0
  },
  "hardware": {
    "cpuUsage": 0,
    "memoryUsage": 0,
    "gpuUsage": 0,
    "npuUsage": 0,
    "temperature": 0
  },
  "errors": [],
  "achievements": []
}
EOF
    fi
}

save_state() {
    local session_id=$(date +%s)
    local current_time=$(date -Iseconds)
    
    # Update state with current session info
    jq --arg id "$session_id" \
       --arg time "$current_time" \
       '.session.id = $id | .session.lastCheckpoint = $time | .session.totalSessions += 1' \
       "$STATE_DIR/development.json" > "$STATE_DIR/development.tmp" && \
       mv "$STATE_DIR/development.tmp" "$STATE_DIR/development.json"
}

load_state() {
    if [[ -f "$STATE_DIR/development.json" ]]; then
        cat "$STATE_DIR/development.json"
    else
        echo "{}"
    fi
}

# ============================================================================
# System Monitoring Functions  
# ============================================================================

monitor_hardware() {
    while true; do
        local cpu_usage=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
        local mem_usage=$(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100.0}')
        local gpu_usage=0
        local npu_usage=0
        local temp=0
        
        # Try to get GPU usage
        if command -v nvidia-smi &> /dev/null; then
            gpu_usage=$(nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits | head -1)
        fi
        
        # Try to get CPU temperature
        if [[ -f /sys/class/thermal/thermal_zone0/temp ]]; then
            temp=$(($(cat /sys/class/thermal/thermal_zone0/temp) / 1000))
        fi
        
        # Update metrics
        jq --argjson cpu "$cpu_usage" \
           --argjson mem "$mem_usage" \
           --argjson gpu "$gpu_usage" \
           --argjson npu "$npu_usage" \
           --argjson temp "$temp" \
           '.hardware.cpuUsage = $cpu | .hardware.memoryUsage = $mem | .hardware.gpuUsage = $gpu | .hardware.npuUsage = $npu | .hardware.temperature = $temp' \
           "$STATE_DIR/development.json" > "$STATE_DIR/development.tmp" && \
           mv "$STATE_DIR/development.tmp" "$STATE_DIR/development.json"
        
        sleep 5
    done
}

# ============================================================================
# Development Process Functions
# ============================================================================

start_local_ai() {
    echo -e "${CYAN}🤖 Starting Local AI Models...${NC}"
    
    # Start Ollama if not running
    if ! pgrep -f "ollama" > /dev/null; then
        echo "Starting Ollama service..."
        ollama serve > "$LOG_DIR/ollama.log" 2>&1 &
        sleep 3
    fi
    
    # Load development models
    local models=("codellama:13b-code" "deepseek-coder:33b" "starcoder:15b")
    for model in "${models[@]}"; do
        echo "Loading model: $model"
        if ! ollama list | grep -q "$model"; then
            ollama pull "$model" > "$LOG_DIR/model-$model.log" 2>&1 &
        fi
    done
    
    # Update state
    jq '.ai.localModelsActive = ["codellama:13b-code", "deepseek-coder:33b", "starcoder:15b"]' \
       "$STATE_DIR/development.json" > "$STATE_DIR/development.tmp" && \
       mv "$STATE_DIR/development.tmp" "$STATE_DIR/development.json"
}

start_development_services() {
    echo -e "${BLUE}🔧 Starting Development Infrastructure...${NC}"
    
    # Start databases
    if ! docker ps | grep -q postgres; then
        docker run -d --name seo-postgres \
            -e POSTGRES_DB=seo_platform \
            -e POSTGRES_USER=dev \
            -e POSTGRES_PASSWORD=dev123 \
            -p 5432:5432 \
            postgres:15-alpine > "$LOG_DIR/postgres.log" 2>&1
    fi
    
    if ! docker ps | grep -q redis; then
        docker run -d --name seo-redis \
            -p 6379:6379 \
            redis:7-alpine > "$LOG_DIR/redis.log" 2>&1
    fi
    
    # Start monitoring
    echo "Starting development monitoring..."
    monitor_hardware &
    
    echo -e "${GREEN}✅ Development services started${NC}"
}

start_status_dashboard() {
    echo -e "${PURPLE}📊 Starting Professional Status Dashboard...${NC}"
    
    # Start the status dashboard
    cd "$PROJECT_ROOT/dashboard"
    if [[ ! -f "package.json" ]]; then
        npm init -y > /dev/null 2>&1
        npm install express three socket.io cors > /dev/null 2>&1
    fi
    
    npm start > "$LOG_DIR/dashboard.log" 2>&1 &
    
    echo -e "${GREEN}🌐 Status Dashboard: http://localhost:$DASHBOARD_PORT${NC}"
}

# ============================================================================
# Main Orchestration
# ============================================================================

show_banner() {
    clear
    echo -e "${BOLD}${CYAN}"
    echo "╔════════════════════════════════════════════════════════════════════════════════╗"
    echo "║                    SEO Intelligence Platform                                   ║"
    echo "║                AI-Powered Development Orchestration Engine                    ║"
    echo "║                                                                                ║"
    echo "║  🤖 Local AI Models    🔧 Auto-Resume    📊 Real-time Metrics               ║"
    echo "║  ⚡ 24/7 Development   🛡️  State Persistence   🎯 Professional Dashboard    ║"
    echo "╚════════════════════════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    echo
}

check_prerequisites() {
    echo -e "${YELLOW}🔍 Checking Prerequisites...${NC}"
    
    local missing=()
    
    # Check required commands
    command -v docker >/dev/null 2>&1 || missing+=("docker")
    command -v node >/dev/null 2>&1 || missing+=("node")
    command -v npm >/dev/null 2>&1 || missing+=("npm")
    command -v jq >/dev/null 2>&1 || missing+=("jq")
    command -v ollama >/dev/null 2>&1 || missing+=("ollama")
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        echo -e "${RED}❌ Missing prerequisites: ${missing[*]}${NC}"
        echo "Please install missing dependencies and run again."
        exit 1
    fi
    
    echo -e "${GREEN}✅ All prerequisites met${NC}"
}

main() {
    show_banner
    check_prerequisites
    
    # Initialize state management
    init_state
    save_state
    
    echo -e "${BOLD}${GREEN}🚀 Initializing AI Development Environment...${NC}"
    echo
    
    # Check if platform needs to be built
    check_platform_built() {
        if [[ ! -f "$PROJECT_ROOT/package.json" ]] || [[ ! -d "$PROJECT_ROOT/src" ]]; then
            echo -e "${YELLOW}📦 SEO Platform not built yet. Building now...${NC}"
            echo
            bash "$PROJECT_ROOT/generate-complete-platform.sh"
            echo
            echo -e "${GREEN}✅ Platform build completed!${NC}"
            echo -e "${BLUE}🔄 Continuing with development environment startup...${NC}"
            echo
        else
            echo -e "${GREEN}✅ SEO Platform already built${NC}"
        fi
    }

    check_platform_built

    # Start core services
    start_local_ai
    start_development_services
    
    # Create dashboard and monitoring
    bash "$PROJECT_ROOT/create-dashboard.sh" &
    bash "$PROJECT_ROOT/create-kpi-tracker.sh" &
    
    start_status_dashboard
    
    # Check WSL Windows access
    bash "$PROJECT_ROOT/check-wsl-access.sh"
    
    echo
    echo -e "${BOLD}${GREEN}🎯 Development Environment Ready!${NC}"
    echo
    echo -e "${CYAN}📊 Status Dashboard: ${BOLD}http://localhost:$DASHBOARD_PORT${NC}"
    echo -e "${CYAN}📈 KPI Dashboard:   ${BOLD}http://localhost:$API_PORT${NC}"
    echo -e "${PURPLE}🪟 Windows Browser: Open the URLs above directly in Windows${NC}"
    echo -e "${CYAN}💾 State Directory: ${BOLD}$STATE_DIR${NC}"
    echo -e "${CYAN}📝 Logs Directory:  ${BOLD}$LOG_DIR${NC}"
    echo
    echo -e "${YELLOW}🔄 Auto-resume enabled - development will continue on system restart${NC}"
    echo -e "${YELLOW}🛑 To stop: kill all processes or run ${BOLD}./stop${NC}"
    echo
    
    # Keep the main process running
    wait
}

# Handle cleanup on exit
trap 'echo -e "\n${YELLOW}🛑 Shutting down development environment...${NC}"; save_state; exit 0' INT TERM

# Run main function
main "$@"